#include <LiquidCrystal_PCF8574.h>
#include <SoftwareSerial.h>
SoftwareSerial esp8266(9,10); 
#include <LiquidCrystal.h>
#include <stdlib.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BMP280.h>
#include <DHT.h>

//Constants
#define DHTPIN 7     // what pin we're connected to
#define DHTTYPE DHT22   // DHT 22  (AM2302)
DHT dht(DHTPIN, DHTTYPE); //// Initialize DHT sensor for normal 16mhz Arduino

LiquidCrystal_PCF8574 lcd(0x27);

#define SSID "test"     // "SSID-WiFiname" 
#define PASS "password"       // "password"
#define IP "184.106.153.149"// thingspeak.com ip
String msg = "GET /update?key=UCXC5E63ISD1L6JJ"; //change it with your api key like "GET /update?key=Your Api Key"
Adafruit_BMP280 bmp; // I2C

int light;
int pin = 6;
unsigned long duration;
unsigned long starttime;
unsigned long sampletime_ms = 2000; 
unsigned long lowpulseoccupancy = 0;
float ratio = 0;
float concentration = 0;

//Variables
int chk;
float hum;  //Stores humidity value
float temp; //Stores temperature value
float Vsig;

void setup() {
  lcd.setBacklight(255);
  pinMode(A1,INPUT);
  lcd.begin(16, 2);
  lcd.print("Welcome!");
  delay(100);
  //lcd.setCursor(0,1);
  Serial.begin(115200); //or use default 115200.
  esp8266.begin(115200);
  lcd.clear();
  delay(1000);
  lcd.print("Setting up...");
//  if(esp8266.find("OK")){
//    connectWiFi();
//  }

  //interruptSetup();
   dht.begin(); 
  if (!bmp.begin()) {  
    Serial.println(F("Could not find a valid BMP280 sensor, check wiring!"));
    while (1);
  }
  pinMode(6,INPUT);
}

void loop() {
    lcd.clear();
    //lcd.print(F("Temp= ") + bmp.readTemperature());
    lcd.print("Baro:");
    lcd.print(bmp.readTemperature());
    lcd.print(" *C");
    delay(1000);

    lcd.clear();
    light=analogRead(A0);
    lcd.println("Light= " + String(light));
    delay(1000);

    lcd.clear();
    hum = dht.readHumidity();
    temp= dht.readTemperature();
    //Print temp and humidity values to serial monitor
    lcd.print("Temp: ");
    lcd.print(temp);
    lcd.print(" *C");
    delay(1000);

    //uv sensor 
    lcd.clear();
    int sensorValue;
  long  sum=0;
  for(int i=0;i<1024;i++)
   {  
      sensorValue=analogRead(A0);
      sum=sensorValue+sum;
      delay(2);
   }   
 sum = sum >> 10;
 Vsig = sum*4980.0/1023.0; // Vsig is the value of voltage measured from the SIG pin of the Grove interface 
if (Vsig < 50) {
    lcd.print("UV Index: 0 "); 
 }
if (Vsig > 50 && Vsig < 227) {
    lcd.print("UV Index: 1 "); 
}
if (Vsig > 227 && Vsig < 318) {
    lcd.print("UV Index: 2 "); 
 }
if (Vsig > 318 && Vsig < 408) {
    lcd.print("UV Index: 3 ");
 }
if (Vsig > 408 && Vsig < 503) {
    lcd.print("UV Index: 4 "); 
 }
if (Vsig > 503 && Vsig < 606) {
    lcd.print("UV Index: 5 "); 
 }
if (Vsig > 606 && Vsig < 696) {
    lcd.print("UV Index: 6 "); 
 }
if (Vsig > 696 && Vsig < 795) {
    lcd.print("UV Index: 7 ");
 }
if (Vsig > 795 && Vsig < 881) {
    lcd.print("UV Index: 8 "); 
 }
if (Vsig > 881 && Vsig < 976) {
    lcd.print("UV Index: 9 "); 
 }
if (Vsig > 976 && Vsig < 1079) {
    lcd.print("UV Index: 10 "); 
 }
if (Vsig > 1079 && Vsig < 1170) {
    lcd.print("UV Index: 11 "); 
}
if (Vsig > 1170) {
    lcd.print("UV Index: 11+ ");
 }
 
 delay(1000);

lcd.clear();
 //dust
 duration = pulseIn(pin, LOW);
  lowpulseoccupancy = lowpulseoccupancy+duration;
  if ((millis()-starttime) >= sampletime_ms) //if the sampel time = = 30s
  {
    ratio = lowpulseoccupancy/(sampletime_ms*10.0);  
    concentration = 1.1*pow(ratio,3)-3.8*pow(ratio,2)+520*ratio+0.62; 
    lcd.print("Dust = ");
    lcd.print(concentration);
    lcd.println(" pcs/0.01cf");
    lowpulseoccupancy = 0;
    starttime = millis();
  }
 delay(1000);
}

void interruptSetup(){     
  TCCR2A = 0x02;     // DISABLE PWM ON DIGITAL PINS 3 AND 11, AND GO INTO CTC MODE
  TCCR2B = 0x06;     // DON'T FORCE COMPARE, 256 PRESCALER 
  OCR2A = 0X7C;      // SET THE TOP OF THE COUNT TO 124 FOR 500Hz SAMPLE RATE
  TIMSK2 = 0x02;     // ENABLE INTERRUPT ON MATCH BETWEEN TIMER2 AND OCR2A
  sei();             // MAKE SURE GLOBAL INTERRUPTS ARE ENABLED      
} 

boolean connectWiFi(){
  Serial.println("AT+CWMODE=1");
  esp8266.println("AT+CWMODE=1");
  delay(2000);
  String cmd="AT+CWJAP=\"";
  cmd+=SSID;
  cmd+="\",\"";
  cmd+=PASS;
  cmd+="\"";
  Serial.println(cmd);
  esp8266.println(cmd);
  delay(5000);
  if(esp8266.find("OK")){
    Serial.println("OK");
    return true;    
  }else{
    return false;
  }
}
